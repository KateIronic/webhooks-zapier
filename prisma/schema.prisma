generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  password String
  name         String?
  email        String  @unique
  profileImage String?
  tier         String? @default("Free")
  credits      String? @default("10")

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  localGoogleId    String?  @unique
  googleResourceId String?  @unique

  LocalGoogleCredential LocalGoogleCredential?
  DiscordWebhook        DiscordWebhook[]
  Notion                Notion[]
  Slack                 Slack[]
  connections           Connections[]
  zaps             Zap[]
}

model Zap {
  id String @id @default(uuid())
  triggerId String
  userId    Int 
  trigger Trigger?
  actions Action[]
  zapRuns ZapRun[]
  nodes             String?
  edges             String?
  name              String
  discordTemplate   String?
  notionTemplate    String?
  slackTemplate     String?
  slackChannels     String[]
  slackAccessToken  String?
  notionAccessToken String?
  notionDbId        String?
  flowPath          String?
  cronPath          String?
  publish           Boolean? @default(false)
  description       String
  user              User     @relation(fields: [userId], references: [id]) // Keep this as is
}

  
model Trigger {
  id          String  @id @default(uuid())
  zapId       String  @unique
  triggerId   String
  metadata    Json  @default("{}")
  type        AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap         Zap                @relation(fields: [zapId], references: [id])
}

model Action {
  id        String  @id @default(uuid())
  zapId     String  
  zap       Zap     @relation(fields: [zapId], references: [id])
  actionId  String
  metadata    Json  @default("{}")
  type      AvailableAction @relation(fields: [actionId], references: [id])
  sortingOrder Int    @default(0)
}

model AvailableAction {
  id       String @id @default(uuid())
  name     String
  image    String
  actions  Action[]
}

model AvailableTrigger {
  id       String @id @default(uuid())
  name     String 
  image    String
  triggers Trigger[]
}

model ZapRun {
  id           String @id @default(uuid())
  zapId        String
  metadata     Json
  zap          Zap @relation(fields: [zapId], references: [id])
  zapRunOutbox ZapRunOutbox?
}

model ZapRunOutbox {
  id          String @id @default(uuid())
  zapRunId    String @unique
  zapRun      ZapRun @relation(fields: [zapRunId], references: [id])
}
model LocalGoogleCredential {
  id          String @id @default(uuid())
  accessToken String @unique

  folderId   String?
  pageToken  String?
  channelId  String  @unique @default(uuid())
  subscribed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int  @unique
  User   User @relation(fields: [userId], references: [id])
}

model DiscordWebhook {
  id          String        @id @default(uuid())
  webhookId   String        @unique
  url         String        @unique
  name        String
  guildName   String
  guildId     String
  channelId   String        @unique
  userId Int 
  User   User @relation(fields: [userId], references: [id])
  connections Connections[]
}

model Slack {
  id String @id @default(uuid())

  appId            String
  authedUserId     String
  authedUserToken  String @unique
  slackAccessToken String @unique
  botUserId        String
  teamId           String
  teamName         String

  userId Int
  User   User @relation(fields: [userId], references: [id])
  connections Connections[]
}

model Notion {
  id            String        @id @default(uuid())
  accessToken   String        @unique
  workspaceId   String        @unique
  databaseId    String        @unique
  workspaceName String
  workspaceIcon String
  userId Int 
  User   User @relation(fields: [userId], references: [id])
  connections   Connections[]
}

model Connections {
  id               String          @id @default(uuid())
  type             String          @unique
  DiscordWebhook   DiscordWebhook? @relation(fields: [discordWebhookId], references: [id])
  discordWebhookId String?
  Notion           Notion?         @relation(fields: [notionId], references: [id])
  notionId         String?
  userId Int? 
  User   User? @relation(fields: [userId], references: [id])
  Slack            Slack?          @relation(fields: [slackId], references: [id])
  slackId          String?
}

